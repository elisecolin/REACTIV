// When using this code in a publication, please cite:
// 
// Colin, E., & Nicolas, J. M. (2020). 
// Change Detection Based on the Coefficient of Variation in SAR Time-Series of Urban Areas. 
// Remote Sensing, 12(13).
// 
// or, if you can read french:
//// Visualisation des changements sur séries temporelles radar : méthode REACTIV
// évaluée à l’échelle mondiale sous Google Earth Engine
// Elise Colin Koeniguer et al. 
// CFPT 2018
// https://rfiap2018.ign.fr/sites/default/files/ARTICLES/CFPT2018/Oraux/CFPT2018_paper_koeniguer.pdf
// -------------------------------------------------------------
// In this version, the method is applied on one unique orbit.
// The chosen orbit is the most frequent one over the Center of the Map
// Parameters: DATES, ASCENDING OR DESCENDING, croppalette: portion of the HSV palette used
//

var str1='2020-03-09';
var str2='2022-03-21';

var str='ASCENDING';
var croppalette=1.5;


// ------------------------------------------------------------
// date selection
var date2 = ee.Date(str2);
var date1 = ee.Date(str1);
var ds = date2.difference(date1, 'day');

// Comparaisons polar
var polarvv='VV';
var polarvh='VH';


// Centering
var pos = Map.getCenter();
print('Coordinate of the Center of the Map',pos);

// Load the Sentinel-1 ImageCollection centered on the location "pos"
// Necessity to have the stack centered on this location in order to find next the orbit numbers
var sentinel1_liste = ee.ImageCollection('COPERNICUS/S1_GRD_FLOAT')
  .filterDate(date1, date2)
  .filter(ee.Filter.listContains('transmitterReceiverPolarisation', 'VV'))
  .filter(ee.Filter.listContains('transmitterReceiverPolarisation', 'VH'))
//  .filter(ee.Filter.eq('instrumentMode', 'IW'))
  .filterBounds(pos);
//  .filter(ee.Filter.eq('orbitProperties_pass', str));

// sentinel collection of the world without the restriction of the position
var sentinel1_liste2 = ee.ImageCollection('COPERNICUS/S1_GRD_FLOAT')
  .filterDate(date1, date2)
  .filter(ee.Filter.listContains('transmitterReceiverPolarisation', 'VV'))
  .filter(ee.Filter.listContains('transmitterReceiverPolarisation', 'VH'))
//  .filter(ee.Filter.eq('orbitProperties_pass', str))
  .filter(ee.Filter.eq('instrumentMode', 'IW'));



// a solution to get metadata value of images of a collection
var NbOrbit = sentinel1_liste.aggregate_count_distinct('relativeOrbitNumber_start');
//print('Number of Orbits',NbOrbit);
var ListOrbits = sentinel1_liste.aggregate_array('relativeOrbitNumber_start');
// print(ListOrbits);


// find orbit numbers and their frequency
var freq = ee.Dictionary(ee.List(ListOrbits).reduce(ee.Reducer.frequencyHistogram()));
// print('freq',freq);
var array = ee.Array([freq.keys().map(ee.Number.parse), freq.values()]);
// print('array',array);

// orbit choice : first, the one with the max frequency
var frequences = array.slice(0,-1);
var arraysort = array.sort(frequences);
var index = ee.Number(NbOrbit).add(-1);
var orbite = arraysort.get([0,ee.Number(index)]);
 print('Selected orbit=',orbite);


// find images with the choice orbit
var sentinel1 = sentinel1_liste2.filterMetadata('relativeOrbitNumber_start', 'equals', orbite);

// This function applies to each image the linear scale
var amplitude = function(image) {
  var imlin = image.expression(
    'sqrt(intensity)', {
      'intensity': image
  });
  return imlin; // conversion in linear, then compute mean: classical mean
};


var stdLinear = sentinel1.select(polarvh).map(amplitude).reduce(ee.Reducer.stdDev());
var meanLinear = sentinel1.select(polarvh).map(amplitude).reduce(ee.Reducer.mean());
var magicvh=stdLinear.divide(meanLinear);

var stdLinear = sentinel1.select(polarvv).map(amplitude).reduce(ee.Reducer.stdDev());
var meanLinear = sentinel1.select(polarvv).map(amplitude).reduce(ee.Reducer.mean());
var magicvv=stdLinear.divide(meanLinear);
 
var imaxvh = sentinel1.select(polarvh).max();
var imaxvv = sentinel1.select(polarvv).max();
var magic=magicvv.max(magicvh);
var imax=imaxvv.max(imaxvh);

// This function affects value of days for pixels where maximum is reached
var timevh = function(image) {
  var days = image.date().difference(date1, 'day').divide(ds); //divide by the period of time observed
//  return image.where(image.lt(imaxvh),0).where(image.gte(imaxvh),days);
  return image.where(image.lt(imaxvh),0).where(image.gte(imaxvh),days);
};
var daysvh=sentinel1.select(polarvh).map(timevh).sum();


var timevv = function(image) {
  var days = image.date().difference(date1, 'day').divide(ds); //divide by the period of time observed
  return image.where(image.lt(imaxvv),0).where(image.gte(imaxvv),days);
};
var daysvv=sentinel1.select(polarvv).map(timevv).sum();

var days=(daysvv.where(magicvv.lte(magicvh),daysvh));
days=days.divide(croppalette);


// Images of Number of images: sizepile
var unit = function(image) {
  var imunit = image.multiply(0).add(1);
  return imunit; // conversion in linear, then compute mean: classical mean
};
var sizepile=sentinel1.select(polarvh).map(unit).sum(); 


// Parameter for dynamics
var mu=0.2286; // Theoretical mean for Rayleigh Nakagam L=4.9
var stdmu=ee.Image(0.1616);
var stdmu=stdmu.divide(sizepile.sqrt()); // Theoretical std for Rayleigh Nakagami L=4.9
var magicnorm=magic.subtract(mu).divide(stdmu.multiply(10)).clamp(0,1);



var rgb=ee.Image.cat(days,magicnorm,imax.divide(5).clamp(0,1)).hsvToRgb();



// ---------------- DATE LISTS ----------------------------------------
// Get the date range of images in the collection.
var range =sentinel1.select(polarvh).reduceColumns(ee.Reducer.minMax(), ["system:time_start"])
print('Date range: ', ee.Date(range.get('min')), ee.Date(range.get('max')))
var okMap2 = sentinel1.select(polarvh).map(function(image) {
  return image.set('date', image.date().format('YY MM dd'));
});
// Get a list of the dates.
var datesCount = okMap2.aggregate_count_distinct('date');
print('Number of dates', datesCount);
var datesList = okMap2.aggregate_array('date');
print('Date List', datesList);
// find unique dates and their frequency
var freq = ee.Dictionary(ee.List(datesList).reduce(ee.Reducer.frequencyHistogram()));
print('freq',freq);




Map.setOptions('satellite');
var visparams = {min: [0, 0, 0],
                 max: [1, 1, 1],
                 gamma: 3};
Map.addLayer(rgb, visparams,'REACTIV Visualization');
//Map.addLayer(paris_ai4geo, {}, 'rectangleGeoJSON');



// TEMPORAL LEGEND
var vis = {min:0, max:1, palette:['FF0000','FF9900','CCFF00','33FF00','00FF66','00FFFF','0066FF','3300FF','CC00FF','FF0099','FF0000']};
function makeLegend(vis) {
  var lon = ee.Image.pixelLonLat().select('longitude');
  var gradient = lon.multiply((vis.max-vis.min)/(100.0)/croppalette).add(vis.min);
  var legendImage = gradient.visualize(vis);
  var thumb = ui.Thumbnail({
    image: legendImage, 
    params: {bbox:'0,0,100,4', dimensions:'285x20'},  
    style: {padding: '1px', position: 'bottom-center',backgroundColor:'black'}
  });
  
var panel = ui.Panel({
    widgets: [
      ui.Label(str1),
      ui.Label(str),
      ui.Label('VH/VV'),
      ui.Label(str2),
    ],
    layout: ui.Panel.Layout.flow('horizontal'),
    style: {stretch: 'horizontal',backgroundColor:'black',color:'blue'}
  });
  return ui.Panel({style: {backgroundColor: 'black'}}).add(panel).add(thumb);
}
Map.add(makeLegend(vis));




// Create the title label.
var title = ui.Label('Click to inspect');
title.style().set('position', 'bottom-center');
Map.add(title);

// Create a panel to hold the chart.
var panel = ui.Panel();
panel.style().set({
  width: '400px',
  position: 'bottom-right'
});
Map.add(panel);

// Register a function to draw a chart when a user clicks on the map.
Map.onClick(function(coords) {
  panel.clear();
  var point = ee.Geometry.Point(coords.lon, coords.lat);
  print(point)
  //panel.add(date);
  var chart2=ui.Chart.image.series(sentinel1.select('VV','VH'), point, null, 30)
  .setChartType('ScatterChart')
      .setOptions({
      title: 'temporal profile',
      hAxis: {title: 'Acquisition Date'},
      vAxis: {title: 'Intensity Values (linear)'},
      });
  panel.add(chart2);
});


