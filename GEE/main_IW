// When using this code in a publication, please cite
//
// Elise Colin Koeniguer et al, 
// Colored visualization of multitemporal SAR data for change detection: issues and methods
// EUSAR 2018
//
// or, if you can read french:
//
// Visualisation des changements sur séries temporelles radar : méthode REACTIV
// évaluée à l’échelle mondiale sous Google Earth Engine
// Elise Colin Koeniguer et al. 
// CFPT 2018
// https://rfiap2018.ign.fr/sites/default/files/ARTICLES/CFPT2018/Oraux/CFPT2018_paper_koeniguer.pdf
// -------------------------------------------------------------
// In this version, the method is applied on one unique orbit.
// The chosen orbit is the most frequent one over the Center of the Map
// Parameters: DATES, ASCENDING OR DESCENDING, POLARISATION VH OR VV
var str2='2018-06-10';
var str1='2015-11-10';
var str='ASCENDING';
var polar='VV';

// ------------------------------------------------------------
// date selection
var date2 = ee.Date(str2);
var date1 = ee.Date(str1);
var ds = date2.difference(date1, 'day');


// Centering
var pos = Map.getCenter();
print('Coordinate of the Center of the Map',pos);

// Load the Sentinel-1 ImageCollection centered on the location "pos"
// Necessity to have the stack centered on this location in order to find next the orbit numbers
var sentinel1_liste = ee.ImageCollection('COPERNICUS/S1_GRD')
  .filterDate(date1, date2)
.filter(ee.Filter.listContains('transmitterReceiverPolarisation', 'VV'))
.filter(ee.Filter.listContains('transmitterReceiverPolarisation', 'VH'))
  .filter(ee.Filter.eq('instrumentMode', 'IW'))
  .filterBounds(pos)
  .filter(ee.Filter.eq('orbitProperties_pass', str));

// sentinel collection of the world without the restriction of the position
var sentinel1_liste2 = ee.ImageCollection('COPERNICUS/S1_GRD')
  .filterDate(date1, date2)
.filter(ee.Filter.listContains('transmitterReceiverPolarisation', 'VV'))
.filter(ee.Filter.listContains('transmitterReceiverPolarisation', 'VH'))
  .filter(ee.Filter.eq('instrumentMode', 'IW'))
  .filter(ee.Filter.eq('orbitProperties_pass', str));


// a solution to get metadata value of images of a collection
var NbOrbit = sentinel1_liste.aggregate_count_distinct('relativeOrbitNumber_start');
print('Number of Orbits',NbOrbit);
var ListOrbits = sentinel1_liste.aggregate_array('relativeOrbitNumber_start');
// print(ListOrbits);


// find orbit numbers and their frequency
var freq = ee.Dictionary(ee.List(ListOrbits).reduce(ee.Reducer.frequencyHistogram()));
// print('freq',freq);
var array = ee.Array([freq.keys().map(ee.Number.parse), freq.values()]);
// print('array',array);

// orbit choice : first, the one with the max frequency
var frequences = array.slice(0,-1);
var arraysort = array.sort(frequences);
var index = ee.Number(NbOrbit).add(-1);
var orbite = arraysort.get([0,ee.Number(index)]);
print('Selected orbit=',orbite);


// find images with the choice orbit
var sentinel1 = sentinel1_liste2.filterMetadata('relativeOrbitNumber_start', 'equals', orbite);


/////////////////////////////////////////
// Optional: Mask for oceans
var elev = ee.Image('USGS/GMTED2010');
var ocean = elev.lte(0);


// This function applies to each image the linear scale
var linear = function(image) {
  var imlin = image.expression(
    '10**(amplitude/20)', {
      'amplitude': image.select(polar)
  });
  return imlin; // conversion in linear, then compute mean: classical mean
};

var stdLinear = sentinel1.select(polar).map(linear).reduce(ee.Reducer.stdDev());
var meanLinear = sentinel1.select(polar).map(linear).reduce(ee.Reducer.mean());
var magic=stdLinear.divide(meanLinear);



var imagemax = sentinel1.select(polar).max();
var imax = imagemax.expression(
    '10 ** (amplitude/20)', {
      'amplitude': imagemax.select(polar)
});




// This function affects value of days for pixels where maximum is reached
var time = function(image) {
  var days = image.date().difference(date1, 'day').divide(ds); //divide by the period of time observed
  return image.where(image.lt(imagemax),0).where(image.gte(imagemax),days);
};
var days=sentinel1.select(polar).map(time).sum();


// Images of Number of images: sizepile
var unit = function(image) {
  var imunit = image.multiply(0).add(1);
  return imunit; // conversion in linear, then compute mean: classical mean
};
var sizepile=sentinel1.select(polar).map(unit).sum(); 


// Parameter for dynamics
var mu=0.2286; // Theoretical mean for Rayleigh Nakagam L=4.9
var stdmu=ee.Image(0.1616);
var stdmu=stdmu.divide(sizepile.sqrt()); // Theoretical std for Rayleigh Nakagami L=4.9
var magicnorm=magic.subtract(mu).divide(stdmu.multiply(10)).add(0.25).clamp(0,1);


var testH=ee.String(polar)
var facteurA=(testH.compareTo('VV').eq(0).multiply(2.6).add(testH.compareTo('VH').eq(0).multiply(0.8))).add((testH.compareTo('HH').eq(0).multiply(1.4))); // to recast VV differently from VH

var rgb=ee.Image.cat(days,magicnorm,imax.subtract(0.0).pow(facteurA)).hsvToRgb();
// dynamics are different for VV and VH polarization


var visparams = {min: [0, 0, 0],
                 max: [1, 1, 1],
                 gamma: 1};
Map.addLayer(rgb, visparams,'REACTIV Visualization');
//Map.addLayer(magicnorm, {min:0, max:1});


// TEMPORAL LEGEND
var vis = {min:0, max:1, palette:['FF0000','FF9900','CCFF00','33FF00','00FF66','00FFFF','0066FF','3300FF','CC00FF','FF0099','FF0000']};
function makeLegend(vis) {
  var lon = ee.Image.pixelLonLat().select('longitude');
  var gradient = lon.multiply((vis.max-vis.min)/100.0).add(vis.min);
  var legendImage = gradient.visualize(vis);
  var thumb = ui.Thumbnail({
    image: legendImage, 
    params: {bbox:'0,0,100,4', dimensions:'285x20'},  
    style: {padding: '1px', position: 'bottom-center',backgroundColor:'black'}
  });
  

  var panel = ui.Panel({
    widgets: [
      ui.Label(str1),
      ui.Label(str),
      ui.Label(polar),
      ui.Label(str2),
    ],
    layout: ui.Panel.Layout.flow('horizontal'),
    style: {stretch: 'horizontal',backgroundColor:'black',color:'blue'}
  });
  return ui.Panel({style: {backgroundColor: 'black'}}).add(panel).add(thumb);

}
Map.add(makeLegend(vis));

var palette = [
  '000000','298A08' ,'80FF00','FFFF00','FF8000','FF0000']; //% du plus bas vers le plus haut
var change = magicnorm.gt(0.8).and(imagemax.gt(-10));
Map.setOptions('satellite');
Map.addLayer(magicnorm.updateMask(change), {min: [0.8], max: [1], palette: palette},'Change detection Map')

